openapi: 3.0.0

servers:
  - url: http://localhost:8080/
    description: Local test server (docker compose)
  - url: http://localhost:8081/
    description: Local test server - running directly

info:
  description: Crowdfunding API
  version: "1.0.0"
  title: Crowdfunding API
  contact:
    email: santos.mateus@protonmail.com

paths:
  /health:
    get:
      summary: provides a health check for the application
      operationId: api.health.get
      description: |
        Gets the health of the application
      responses:
        "200":
          description: Successful health check - status will be 'ok' if health is good
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "500":
          description: Unsuccessful health check

  /projects:
    get:
      summary: Returns a list of all projects
      operationId: api.projects.get_projects
      description: Returns short information about all projects paginated
      parameters:
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: The page number for listing the results.
        - in: query
          name: order
          schema:
            type: string
            default: "desc"
            enum:
              - "asc"
              - "desc"
          description: The ordering of the items.
      responses:
        "200":
          description: Able to get all projects successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - projects
                  - count
                properties:
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectShort"
                  count:
                    type: integer
                    example: 5

  /projects/create:
    post:
      summary: Creates a project
      operationId: api.projects.create_project
      description: |
        Creates a project with the specified parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectLong"
      responses:
        "200":
          description: |
            Whether everything went okay while trying to create the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  message:
                    type: string
                    example: "Something real bad happened"

  /projects/{project_id}:
    get:
      summary: Get details of a specific project
      operationId: api.projects.get_project
      description: Returns detailed information about a specific project
      parameters:
        - in: path
          name: project_id
          description: project id (guid)
          required: true
          schema:
            type: string
            example: "a7420038-3a6d-48e0-8960-cdf839e46f4e"
      responses:
        "200":
          description: Able to get the project successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  projects:
                    $ref: "#/components/schemas/ProjectLong"

        "404":
          description: Project ID not found

  /register/{address}:
    post:
      summary: Registers a user to the platform
      operationId: api.user.register
      description: Adds user to db if he provides a valid signature
      parameters:
        - in: path
          name: address
          description: the address of the user who is trying to register
          required: true
          schema:
            type: string
            example: "addr_test123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nickname
                - signature
              properties:
                nickname:
                  type: string
                  example: Babatomano
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        "200":
          description: |
            Whether everything went okay while trying to register user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  message:
                    type: string
                    example: "Something real bad happened"

  /user/{address}:
    get:
      summary: Info about user
      operationId: api.user.get_info
      description: Get's information about user with this address
      parameters:
        - in: path
          name: address
          description: the address of the user who we are trying to get information from
          required: true
          schema:
            type: string
            example: "addr_test123"
      responses:
        "200":
          description: Whether everything went okay while trying to register user
          content:
            application/json:
              schema:
                type: object
                properties:
                  nickname:
                    type: string
                    example: Babatomano
                  public_key_hash:
                    type: string
                    example: abc123
        "404":
          description: If we couldn't find a user with this address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sorry bro, couldn't find your address"
                  

components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Something really bad happened!"

    Signature:
      oneOf:
        - type: object
          required:
            - signature
            - key
          properties:
            signature:
              type: string
              example: 84584d...db070c
              description: A signature from an arbitrary message the server sent to the user following CIP08
            key:
              type: string
              example: a40101...7dc780
              description: The key used to sign that message
        - type: string
          example: 84584d...db070c
          description: Another possible format that already includes signature and key in one string

    ProjectShort:
      type: object
      required:
        - project_id
        - name
        - creator_address
        - short_description
        - subjects
        - reward_requested
        - days_to_complete
        - collateral
      properties:
        project_id:
          type: string
          example: "473ca642-d238-4b93-b7e4-424a76128727"
        name:
          type: string
          example: "Who Done It 200+ Pages Book"
        creator_address:
          type: string
          example: "stake_test123...abc"
        short_description:
          type: string
          example: "I will write a story about a murder that happened in a spaceship! The ending will be incredible!"
        subjects:
          type: array
          items:
            type: string
            example: Math
        reward_requested:
          type: integer
          example: 100
        days_to_complete:
          type: integer
          example: 31
        collateral:
          type: integer
          example: 200

    ProjectLong:
      type: object
      required:
        - name
        - creator_address
        - short_description
        - long_description
        - subjects
        - reward_requested
        - days_to_complete
        - collateral
        - deliverables
      properties:
        signature:
          $ref: "#/components/schemas/Signature"
        name:
          type: string
          example: "Who Done It 200+ Pages Book"
        creator_address:
          type: string
          example: "stake_test123...abc"
        short_description:
          type: string
          example: "Short description..."
        long_description:
          type: string
          example: "Loooong and boooooring description..."
        subjects:
          type: array
          items:
            type: string
            example: Math
        reward_requested:
          type: integer
          example: 100
        days_to_complete:
          type: integer
          example: 31
        collateral:
          type: integer
          example: 200
        deliverables:
          type: array
          items:
            type: string
            example: "I am gonna do a very good job, trust me :wink"
        mediators:
          type: array
          items:
            type: string
            example: "The good people that are going to assess this project when the time comes"
