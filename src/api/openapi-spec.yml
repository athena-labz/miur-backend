openapi: 3.0.0

servers:
  - url: http://localhost:8080/
    description: Local test server (docker compose)
  - url: http://localhost:8081/
    description: Local test server - running directly

info:
  description: Crowdfunding API
  version: "1.0.0"
  title: Crowdfunding API
  contact:
    email: santos.mateus@protonmail.com

paths:
  /health:
    get:
      summary: provides a health check for the application
      operationId: api.health.get
      description: |
        Gets the health of the application
      responses:
        "200":
          description: Successful health check - status will be 'ok' if health is good
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "500":
          description: Unsuccessful health check

  /projects:
    get:
      summary: Returns a list of all projects
      operationId: api.projects.get_projects
      description: Returns short information about all projects paginated
      parameters:
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: The page number for listing the results.
        - in: query
          name: order
          schema:
            type: string
            default: "desc"
            enum:
              - "asc"
              - "desc"
          description: The ordering of the items.
        - in: query
          name: creator
          schema:
            type: string
          description: The address of the user who created this projects
        - in: query
          name: funder
          schema:
            type: string
          description: The address of the user who is funding these projects
      responses:
        "200":
          description: Able to get all projects successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - projects
                  - count
                properties:
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectInfo"
                  count:
                    type: integer
                    example: 5

  /projects/create:
    post:
      summary: Creates a project
      operationId: api.projects.create_project
      description: |
        Creates a project with the specified parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateProps"
      responses:
        "200":
          description: |
            Whether everything went okay while trying to create the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  message:
                    type: string
                    example: "Something real bad happened"

  /projects/{project_id}:
    get:
      summary: Get details of a specific project
      operationId: api.projects.get_project
      description: Returns detailed information about a specific project
      parameters:
        - in: path
          name: project_id
          description: project id (guid)
          required: true
          schema:
            type: string
            example: "a7420038-3a6d-48e0-8960-cdf839e46f4e"
      responses:
        "200":
          description: Able to get the project successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  project:
                    $ref: "#/components/schemas/ProjectInfo"

        "404":
          description: Project ID not found

  /projects/{project_id}/{stake_address}:
    get:
      summary: Get details of a specific project in relation to this user
      operationId: api.projects.get_project_user
      description: Returns detailed information about a specific project in relation to this user
      parameters:
        - in: path
          name: project_id
          description: project id (guid)
          required: true
          schema:
            type: string
            example: "a7420038-3a6d-48e0-8960-cdf839e46f4e"
        - in: path
          name: stake_address
          description: stake address of the user whose relation with this project we want to get
          required: true
          schema:
            type: string
            example: "stake_test123"
      responses:
        "200":
          description: Able to get the project successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  funder:
                    type: boolean
                    example: True
                  creator:
                    type: boolean
                    example: False
                  mediator:
                    type: boolean
                    example: False

        "400":
          description: Something wrong happened (return message)

        "404":
          description: Project ID or User address not found

  /register/{stake_address}:
    post:
      summary: Registers a user to the platform
      operationId: api.user.register
      description: Adds user to db if he provides a valid signature
      parameters:
        - in: path
          name: stake_address
          description: the stake address of the user who is trying to register
          required: true
          schema:
            type: string
            example: "stake_test123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - payment_address
                - signature
              properties:
                email:
                  type: string
                  example: babatomano@email.com
                payment_address:
                  type: string
                  example: addr_test123
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        "200":
          description: |
            Whether everything went okay while trying to register user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  message:
                    type: string
                    example: "Something real bad happened"

  /user/{stake_address}:
    get:
      summary: Info about user
      operationId: api.user.get_info
      description: Get's information about user with this stake_address
      parameters:
        - in: path
          name: stake_address
          description: the stake_address of the user who we are trying to get information from
          required: true
          schema:
            type: string
            example: "addr_test123"
      responses:
        "200":
          description: Whether everything went okay while trying to register user
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - payment_address
                  - stake_address
                properties:
                  email:
                    type: string
                    example: babatomano@email.com
                  payment_address:
                    type: string
                    example: addr_test123
                  stake_address:
                    type: string
                    example: addr_test123
                  nft_policy_identifier:
                    type: string
                    example: policy123
        "404":
          description: If we couldn't find a user with this address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sorry bro, couldn't find your address"

  /user/{stake_address}/quiz:
    get:
      summary: Quiz related info related to this user
      operationId: api.user.get_quiz_info
      description: Quiz related info related to this user
      parameters:
        - in: path
          name: stake_address
          description: the stake_address of the user who we are trying to get information from
          required: true
          schema:
            type: string
            example: "addr_test123"
      responses:
        "200":
          description: Whether everything went okay while trying to register user
          content:
            application/json:
              schema:
                type: object
                required:
                  - created_quizes
                  - ongoing_quiz_assignments
                  - completed_quiz_assignments
                properties:
                  created_quizes:
                    type: array
                    items:
                      $ref: "#/components/schemas/QuizInfo"
                  ongoing_quiz_assignments:
                    type: array
                    items:
                      $ref: "#/components/schemas/QuizAssignmentInfo"
                  completed_quiz_assignments:
                    type: array
                    items:
                      $ref: "#/components/schemas/QuizAssignmentInfo"
        "404":
          description: If we couldn't find a user with this address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sorry bro, couldn't find your address"
                  code:
                    type: string
                    example: "address-not-found"

  /users:
    get:
      summary: Returns a list of all users
      operationId: api.user.get_users
      description: Returns short information about all users paginated
      parameters:
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: The page number for listing the results.
        - in: query
          name: order
          schema:
            type: string
            default: "desc"
            enum:
              - "asc"
              - "desc"
          description: The ordering of the items.
      responses:
        "200":
          description: Able to get all users successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                  - total
                  - pages
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                    example: 5
                  pages:
                    type: integer
                    example: 5
                  success:
                    type: boolean
                    example: true

  /transaction/projects/fund:
    post:
      operationId: "api.transaction.fund_project"
      summary: "Get cbor from transaction to fund a project"
      description: "Get cbor from transaction to fund a project"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stake_address
                - funding_utxos
                - funding_amount
                - project_id
                - signature
              properties:
                stake_address:
                  type: string
                  example: stake_test123
                funding_utxos:
                  type: array
                  items:
                    type: string
                    example: cbor123
                funding_amount:
                  type: integer
                  example: 10_000_000
                project_id:
                  type: string
                  example: ba3fa9fd-79c8-4a78-b75d-893620de0e7b
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        200:
          description: "Successful entry will respond with {success:true}"
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_cbor:
                    type: string
                    example: "cbor123"
                  witness_cbor:
                    type: string
                    example: "cbor123"
                  message:
                    type: string
                    example: "An error has ocurred"
                  
  /transaction/projects/fund/submitted:
    post:
      operationId: "api.transaction.fund_project_submitted"
      summary: "Confirm that funding transaction was submitted"
      description: "Confirm that funding transaction was submitted"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transaction_hash
                - stake_address
                - signature
                - project_id
                - funding_amount
              properties:
                stake_address:
                  type: string
                  example: stake_test123
                transaction_hash:
                  type: string
                  example: abc123
                signature:
                  $ref: "#/components/schemas/Signature"
                project_id:
                  type: string
                  example: UUID
                funding_amount:
                  type: integer
                  example: 10_000_000
      responses:
        200:
          description: "Successful entry will respond with {success:true}"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Everything went well
        
        400:
          description: Something went wrong

  /quiz/create:
    post:
      summary: Creates a quiz
      operationId: api.quiz.create_quiz
      description: |
        Creates a quiz with the specified parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuizInfo"
      responses:
        "200":
          description: |
            Whether everything went okay while trying to create a quiz
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  message:
                    type: string
                    example: "Something real bad happened"

  /quiz/assign:
    post:
      summary: Assigns a quiz
      operationId: api.quiz.assign_quiz
      description: |
        Assigns a quiz to a specific user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quiz_id
                - user_stake_address
              properties:
                quiz_id:
                  type: string
                  example: 474c366d-4a0d-4838-8530-cfde98e005b3
                user_stake_address:
                  type: string
                  example: stake_test123
      responses:
        "200":
          description: |
            Whether everything went okay while trying to assign this quiz
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizAssignmentInfo"
        "404":
          description: Quiz or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Quiz not found"

  /quiz/{quiz_id}:
    get:
      summary: Quiz info
      operationId: api.quiz.get_quiz
      description: Get's information from a specific quiz
      responses:
        "200":
          description: |
            Everything went okay while trying to get quiz
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizInfo"
        "404":
          description: Quiz not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Quiz not found"

  /quiz/assignment/{quiz_assignment_id}:
    get:
      summary: Quiz Assignment info
      operationId: api.quiz.get_assignment
      description: Get's information from a specific quiz assignment
      parameters:
        - in: path
          name: quiz_assignment_id
          description: the UUID representing this quiz assigment
          required: true
          schema:
            type: string
            example: "bcefdff3-b728-4231-9de2-aa3512fb3228"
      responses:
        200:
          description: |
            Everything went okay while trying to get quiz assignment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizAssignmentInfo"
        404:
          description: Quiz Assignment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Quiz Assignment not found"

  /quiz/attempt/{quiz_id}:
    post:
      operationId: "api.quiz.attempt_answer"
      summary: "Attempt to answer a question from a quiz"
      description: "Attempt to answer a question from a quiz"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stake_address
                - answer
                - signature
              properties:
                stake_address:
                  type: string
                  example: stake_test123
                answer:
                  type: integer
                  example: 0
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        200:
          description: "Successful entry will respond with {success:true}"
          content:
            application/json:
              schema:
                type: object
                required:
                  - right_answer
                  - state
                  - remaining_attempts
                properties:
                  right_answer:
                    type: boolean
                    description: Whether it was the right answer
                    example: true
                  state:
                    type: string
                    example: completed
                  message:
                    type: string
                    example: Wrong Answer - User died
                  current_question:
                    type: integer
                    example: 1
                  remaining_attempts:
                    type: integer
                    example: 3

  /quiz/powerup/{quiz_assignment_id}/activate/{powerup}:
    post:
      operationId: "api.quiz.activate_powerup"
      summary: "Activates one of the remaining powerups the user has"
      description: "Activates one of the remaining powerups the user has"
      parameters:
        - in: path
          name: quiz_assignment_id
          description: the quiz identifier we are activating this powerup on
          required: true
          schema:
            type: string
            example: "05405c65-dc4c-4e2e-a67c-46c2606868b3"
        - in: path
          name: powerup
          description: the powerup you want to activate
          required: true
          schema:
            type: string
            example: "get_hints"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stake_address
                - signature
              properties:
                stake_address:
                  type: string
                  example: stake_test123
                signature:
                  $ref: "#/components/schemas/Signature"
      responses:
        200:
          description: "If the body and auth were valid"
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - powerups
                properties:
                  success:
                    type: boolean
                    description: \
                      Whether we were able to successfully activate the powerup
                    example: true
                  message:
                    type: string
                    example: Wrong Answer - User died
                  powerup_payload:
                    type: object
                    description: \
                      The necessary response info for the powerup we are activating
                  powerups:
                    type: array
                    items:
                      $ref: "#/components/schemas/PowerUpInfo"

components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Something really bad happened!"

    User:
      type: object
      required:
        - stake_address
        - payment_address
        - email
      properties:
        stake_ddress:
          type: string
          example: addr_test123
        payment_address:
          type: string
          example: addr_test123
        email:
          type: string
          example: mateus@email.com
        nft_policy_identifier:
          type: string
          example: policy123

    Signature:
      oneOf:
        - type: object
          required:
            - signature
            - key
          properties:
            signature:
              type: string
              example: 84584d...db070c
              description: A signature from an arbitrary message the server sent to the user following CIP08
            key:
              type: string
              example: a40101...7dc780
              description: The key used to sign that message
        - type: string
          example: 84584d...db070c
          description: Another possible format that already includes signature and key in one string

    ProjectCreateProps:
      type: object
      required:
        - signature
        - name
        - short_description
        - long_description
        - creator
        - mediators
        - subjects
        - deliverables
        - days_to_complete
      properties:
        signature:
          $ref: "#/components/schemas/Signature"
        name:
          type: string
          example: "Who Done It 200+ Pages Book"
        creator:
          type: string
          example: addr_test123
        mediators:
          type: array
          items:
            type: string
            example: "stake_test123"
        short_description:
          type: string
          example: "I will write a story about a murder that happened in a spaceship! The ending will be incredible!"
        long_description:
          type: string
          example: "Loooong and boooooring description..."
        subjects:
          type: array
          items:
            type: string
            example: Math
        deliverables:
          type: array
          items:
            type: string
            example: "I am gonna do a very good job, trust me :wink"
        days_to_complete:
          type: integer
          example: 31

    ProjectInfo:
      type: object
      required:
        - project_id
        - name
        - creator
        - short_description
        - long_description
        - funders
        - mediators
        - subjects
        - deliverables
        - days_to_complete
      properties:
        project_id:
          type: string
          example: "473ca642-d238-4b93-b7e4-424a76128727"
        name:
          type: string
          example: "Who Done It 200+ Pages Book"
        creator:
          $ref: "#/components/schemas/User"
        funders:
          type: array
          items:
            type: object
            required:
              - user
              - amount
            properties:
              user:
                $ref: "#/components/schemas/User"
              amount:
                type: integer
                example: 10_000_000
        mediators:
          type: array
          items:
            $ref: "#/components/schemas/User"
        short_description:
          type: string
          example: "Short description..."
        long_description:
          type: string
          example: "Loooong and boooooring description..."
        subjects:
          type: array
          items:
            type: string
            example: Math
        reward_requested:
          type: integer
          example: 100
        days_to_complete:
          type: integer
          example: 31
        collateral:
          type: integer
          example: 200
        deliverables:
          type: array
          items:
            type: string
            example: "I am gonna do a very good job, trust me :wink"

    QuestionInfo:
      type: object
      required:
        - question
        - answers
      properties:
        question:
          type: string
          example: Who invented fire?
        answers:
          type: array
          items:
            type: string
            example: "Thomas Eddison"
        hints:
          type: array
          items:
            type: string
            example: "Think about the train"
        right_answer:
          type: integer
          example: 0

    PowerUpInfo:
      type: object
      required:
        - name
        - used
      properties:
        name:
          type: string
          example: Tip
        used:
          type: boolean
          example: false

    QuizInfo:
      type: object
      required:
        - creator_name
        - questions
      properties:
        quiz_id:
          type: string
          example: eb7a5e18-5ed9-45eb-8283-6205aac7e1f5
        creator_name:
          type: string
          example: Alice Jones
        creator_stake_address:
          type: string
          example: stake_test123
        questions:
          type: array
          items:
            $ref: "#/components/schemas/QuestionInfo"
        creation_date:
          type: string
          example: "2022-11-23 12:06:38"

    QuizAssignmentInfo:
      type: object
      required:
        - quiz_id
        - assignee_stake_address
        - creator_name
        - questions
        - powerups
        - current_question
        - remaining_attempts
        - completed_success
        - creation_date
      properties:
        quiz_assignment_id:
          type: string
          example: eb7a5e18-5ed9-45eb-8283-6205aac7e1f5
        quiz_id:
          type: string
          example: eb7a5e18-5ed9-45eb-8283-6205aac7e1f5
        assignee_stake_address:
          type: string
          example: stake_test123
        creator_name:
          type: string
          example: Alice Jones
        questions:
          type: array
          items:
            $ref: "#/components/schemas/QuestionInfo"
        powerups:
          type: array
          items:
            $ref: "#/components/schemas/PowerUpInfo"
        current_question:
          type: integer
          example: 0
        remaining_attemps:
          type: integer
          example: 3
        completed_success:
          type: boolean
          example: false
          nullable: true
        creation_date:
          type: string
          example: "2022-11-23 12:06:38"