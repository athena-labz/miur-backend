openapi: 3.0.0

servers:
  - url: http://localhost:8080/
    description: Local test server (docker compose)
  - url: http://localhost:8081/
    description: Local test server - running directly

info:
  description: Crowdfunding API
  version: "1.0.0"
  title: Crowdfunding API
  contact:
    email: santos.mateus@protonmail.com

paths:
  /health:
    get:
      summary: provides a health check for the application
      operationId: api.health.get
      description: |
        Gets the health of the application
      responses:
        "200":
          description: Successful health check - status will be 'ok' if health is good
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "500":
          description: Unsuccessful health check

  /projects:
    get:
      summary: Returns a list of all projects
      operationId: api.projects.get_projects
      description: Returns short information about all projects paginated
      parameters:
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of results displayed on one page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: The page number for listing the results.
        - in: query
          name: order
          schema:
            type: string
            default: "desc"
            enum:
              - "asc"
              - "desc"
          description: The ordering of the items.
      responses:
        "200":
          description: Able to get all projects successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - projects
                  - count
                properties:
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectShort"
                  count:
                    type: integer
                    example: 5

  /projects/create:
    post:
      summary: Creates a project
      operationId: api.projects.create_project
      description: |
        Creates a project with the specified parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectLong"
      responses:
        "200":
          description: |
            Whether everything went okay while trying to create the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: True
                  message:
                    type: string
                    example: "Something real bad happened"

components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Something really bad happened!"

    ProjectShort:
      type: object
      required:
        - name
        - creator_address
        - short_description
        - subjects
        - reward_requested
        - days_to_complete
        - collateral
      properties:
        name:
          type: string
          example: "Who Done It 200+ Pages Book"
        creator_address:
          type: string
          example: "stake_test123...abc"
        short_description:
          type: string
          example: "I will write a story about a murder that happened in a spaceship! The ending will be incredible!"
        subjects:
          type: array
          items:
            type: string
            example: Math
        reward_requested:
          type: integer
          example: 100
        days_to_complete:
          type: integer
          example: 31
        collateral:
          type: integer
          example: 200

    ProjectLong:
      type: object
      required:
        - name
        - creator_address
        - short_description
        - long_description
        - subjects
        - reward_requested
        - days_to_complete
        - collateral
        - deliverables
      properties:
        name:
          type: string
          example: "Who Done It 200+ Pages Book"
        creator_address:
          type: string
          example: "stake_test123...abc"
        short_description:
          type: string
          example: "Short description..."
        long_description:
          type: string
          example: "Loooong and boooooring description..."
        subjects:
          type: array
          items:
            type: string
            example: Math
        reward_requested:
          type: integer
          example: 100
        days_to_complete:
          type: integer
          example: 31
        collateral:
          type: integer
          example: 200
        deliverables:
          type: array
          items:
            type: string
            example: "I am gonna do a very good job, trust me :wink"